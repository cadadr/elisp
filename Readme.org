#+title: Göktuğ's Emacs Lisp Bits
#+options: toc:t num:nil tasks:todo
#+category: elisp

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

This repository is a swarm for all the Elisp stuff I published.  Most
files will have licence information in it, which don't are licenced
under the MIT licence, whose text is available in the LICENSE file.

* What's here?
:PROPERTIES:
:CUSTOM_ID: whatshere
:END:

Below is a listing of all the programs here:

** =paper-theme.el=
:PROPERTIES:
:CUSTOM_ID: paper
:END:
«Paper» is a little, minimal emacs theme that is meant to be simple
and consistent.

It was first intended to resemble the look of paper, but has diverged
from that objective.  Still, though, I keep calling it Paper, as I
like that name.

Paper uses a small colour palette over all the elements.  Org headings
are specially treated with a palette of equidistant colours.  The
colours and heading font sizes are calculated using base and factor
values which can be edited.  See source.

It's most adapted for ELisp-Org users, as I'm one such user, though it
works fine with Markdown, Textile, Python, JavaScript, Html, Diff,
Magit, etc.

# [[./paper1.gif]]

** =pass-listing.el=
:PROPERTIES:
:CUSTOM_ID: pass-listing-el
:END:
«pass-listing» is a simple frontend to the [[https://www.passwordstore.org/][pass]] utility.  It uses the
functions from =password-store.el=.

** =gk-unilat.el=
:PROPERTIES:
:CUSTOM_ID: gk-unilat-el
:END:
«gk-unilat» is a unified input method for European variants of the
Latin alphabet.

It aims to provide comprehensive support for typing characters found
in different European versions of the Latin alphabet, in a unified,
predictable way.

** =gk-greek.el=
:PROPERTIES:
:CUSTOM_ID: gk-greek-el
:END:
«gk-greek» is a transliterating input method for modern Greek.

Translates input in Greek latinization into Greek alphabet.  Mappings
are based on vocal correspondence and common modern transliteration.

** =org-variable-pitch.el=
:PROPERTIES:
:CUSTOM_ID: ovp
:END:
«org-variable-pitch.el» is a minor mode that enables
‘variable-pitch-mode’ in the current Org-mode buffer, and sets some
particular faces up so that they are are rendered in fixed-width font.
Also, indentation, list bullets and checkboxes are displayed in
monospace, in order to keep the shape of the outline.

** =dollar.el=
:PROPERTIES:
:CUSTOM_ID: dollar-el
:END:
This package provides a macro named $ where in its body symbols in the
form $N where N is a positive integer are to stand for positional
arguments to the generated lambda.

If the car of the body is a vector though, that vector becomes the
argument list of the new lambda.

Some examples:

#+BEGIN_SRC elisp
($ (message "Hello, %s" $1))
(funcall ($ (* $1 $1)) 2)
(reduce ($ [a b] (concat a b)) (list "hel" "lo"))
#+END_SRC

* Obsolete packages
** =forecast.el=
:PROPERTIES:
:CUSTOM_ID: forecast-el
:END:

*** Obsoletion notice

/DarkSky.net has been acquired and eventually closed by Apple. Because
I no longer actively use this package, I have not found the time and
energy to port it to something else. See the contents of [[https://github.com/cadadr/elisp/issues/48][issue #48 on
Github]] for reimplementation ideas. If you wish to take over the
package and port it; please open an issue once you have a working
port, I will help with handing the package over on MELPA./

*** Package description

«forecast.el» is a weather forecast report generator, currently using
data from [[https://darksky.net][Dark Sky]] (but I plan to add other backends in the future).

[[./forecast.el.png]]

* Unmaintained packages

** Non-maintenance notice

/The following packages are no longer maintained by me. If you wish to
take over their development, please create a new repository to do so,
and if you want to take over the MELPA package, create an issue on
Github and I will help with that./

** =bsdpkg.el=
:PROPERTIES:
:CUSTOM_ID: bsdpkg-el
:END:
«bsdpkg» is an Emacs interface to FreeBSD =pkg(1)=.  It's planned to
genericise the package to support all *BSD packaging systems, and the
module is written with that sort of extensibility in mind.

#+BEGIN_QUOTE
This is experimental, and kind-of obsoleted as I don't use BSD at
the moment.  I'd be happy to accept changes or to hand it over if
anybody will be interested.
#+END_QUOTE

** =bibliothek.el=
:PROPERTIES:
:CUSTOM_ID: bibliothek-el
:END:
«bibliothek.el» is a personal PDF library manager.  Presently it only
displays a concatenated tabular list of PDF files from many locations,
and allows to open the files or view metadata from that list.  Find
below a screenshot of the default view.  I intend to add some
functionality for moving PDF files around and editing the metadata.

# [[./bibliothek.png]]

* Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:EXPORT_FILE_NAME: docs/CONTRIBUTING
:EXPORT_OPTIONS: toc:nil title:nil author:nil
:END:

# Export: C-c C-e C-s m m

Thanks for your contribution! Please submit a pull request or e-mail a
patch.  Explain clearly your changes and the rationale for them, and
include a clear commit message, prefixed with the relevant filename.

Please base your changes on the =devel= branch.

Please write your commit message as in the example below:

#+BEGIN_EXAMPLE
file-name.el: imperative-mood summary of changes

Optionally further explain the change.
#+END_EXAMPLE

* Issues
Please mention the relevant filename in your issue title.
